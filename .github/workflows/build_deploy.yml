name: Build and Deploy Backend

on:
  push:
    branches:
      - main # Trigger on pushes to the main branch
  pull_request:
    branches:
      - main

jobs:
  build-deploy:
    name: Build and Deploy Backend Application
    runs-on: self-hosted # Use your self-hosted runner

    env:
      BACKEND_USER: ShreyasChatApp
      BACKEND_SERVER: 10.0.9.126
      CHATAPP_DIR: /Django_Chatapp
      SERVICE_NAME: django-backend
      SSH_KEY: /var/lib/jenkins/.ssh/id_rsa
      SONARQUBE_URL: http://108.129.172.35:9000
      SONARQUBE_TOKEN: sqp_29de800178e29b62fb53c688c71e5b45d65675de

    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Sync files to the backend server
      - name: Sync files to backend server
        run: |
          rsync -avz --exclude='.git/' \
            -e "ssh -i $SSH_KEY -o StrictHostKeyChecking=no" \
            ./ $BACKEND_USER@$BACKEND_SERVER:$CHATAPP_DIR

      # Step 3: Run SonarQube analysis
      # - name: Run SonarQube analysis
      #   run: |
      #     ssh -i $SSH_KEY -o StrictHostKeyChecking=no $BACKEND_USER@$BACKEND_SERVER << EOF
      #       set -e
      #       cd $CHATAPP_DIR
      #       sonar-scanner \
      #         -Dsonar.projectKey=Sonarqube-jenkins \
      #         -Dsonar.sources=. \
      #         -Dsonar.host.url=$SONARQUBE_URL \
      #         -Dsonar.login=$SONARQUBE_TOKEN \
      #         -Dsonar.language=py \
      #         -Dsonar.python.version=3.8 \
      #         -Dsonar.qualitygate.wait=true
      #     EOF

      # Step 4: Deploy application
      - name: Deploy application
        run: |
          ssh -i $SSH_KEY -o StrictHostKeyChecking=no $BACKEND_USER@$BACKEND_SERVER << EOF
            set -e
            
            echo ">>> Navigating to project directory..."
            cd $CHATAPP_DIR || { echo "ERROR: Directory not found."; exit 1; }
            
            echo ">>> Activating virtual environment..."
            source /home/$BACKEND_USER/venv/bin/activate # Update the path to your venv
            
            echo ">>> Installing dependencies..."
            pip install --upgrade pip
            pip install -r requirements.txt
            
            echo ">>> Running database migrations..."
            source ~/.bashrc
            if [ -f "~/db_data.sh" ]; then
              bash ~/db_data.sh || { echo "WARNING: Migration failed."; exit 1; }
            else
              echo "WARNING: Migration script not found. Skipping migrations."
            fi
            
            echo ">>> Restarting the backend service..."
            sudo systemctl restart $SERVICE_NAME || { echo "ERROR: Service restart failed."; exit 1; }
            
            echo ">>> Deployment complete!"
          EOF
